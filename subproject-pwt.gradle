ext {
	releaseVersion = '1.1.0'
	snapshotVersion = '1.1.1-SNAPSHOT'
	gwtVersion = '2.6.1'
	guavaVersion = '17.0'

	applyLicense = rootProject.file('LICENSE_LGPL_HEADER').exists()

}


apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'gwt-base'
apply plugin: 'checkstyle'

if (applyLicense) {
	apply plugin: 'license'
}

group = 'fr.putnami.pwt'
version = project.snapshotVersion

sourceCompatibility = 1.7
targetCompatibility = 1.7

eclipse {
	classpath {
		downloadSources=true
	}
}

configurations {
	log4j
	deployerSsh
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	log4j 'org.slf4j:slf4j-api:1.6.1'
	log4j 'org.slf4j:jcl-over-slf4j:1.6.1'
	log4j 'org.slf4j:slf4j-log4j12:1.6.1'
	log4j 'log4j:log4j:1.2.16'

	deployerSsh "org.apache.maven.wagon:wagon-ssh:2.2"

	compile "com.google.guava:guava:$guavaVersion"
	compile "com.google.guava:guava-gwt:$guavaVersion"
	runtime configurations.log4j

	testCompile 'junit:junit:4.11'

}

if (applyLicense) {
	license {
		skipExistingHeaders = true
		header rootProject.file('LICENSE_LGPL_HEADER')
		ext.projectName = project.name
	}
}
gwt {
	gwtVersion =  project.gwtVersion
	eclipse{
		addGwtContainer=false
	}
}
checkstyle{
	configFile rootProject.file('settings/checkstyle/pwt-checkstyle.xml')
}

if (rootProject.tasks.findByPath(':publishAll') != null) {
	rootProject.tasks.publishAll.dependsOn project.tasks.uploadArchives
}
if (rootProject.tasks.findByPath(':publishAllToMavenLocal') != null) {
	rootProject.tasks.publishAllToMavenLocal.dependsOn project.tasks.install
}
if (applyLicense) {
	project.tasks.publish.dependsOn project.tasks.licenseFormat
	if (rootProject.tasks.findByPath(':licenseAll') != null ) {
		rootProject.tasks.licenseAll.dependsOn project.tasks.license
	}
	if (rootProject.tasks.findByPath(':licenseFormatAll') != null) {
		rootProject.tasks.licenseFormatAll.dependsOn project.tasks.licenseFormat
	}
}




if (project.name != 'pwt-doc'){
	//Include all non java (like *.gwt.xml) files from 'src/main/java' folder in resources
	sourceSets.main.resources.srcDir 'src/main/java'

	// Add all sources in jar (needed for GWT compilation using this library
	jar {
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
	    classifier = 'javadoc'
	    from javadoc
	}

	task sourcesJar(type: Jar) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}

	artifacts {
	    archives javadocJar, sourcesJar
	}

	javadoc  {
		classpath += configurations.gwtSdk
	    options.addStringOption("sourcepath", "")
	}

	signing {
		required { gradle.taskGraph.hasTask("uploadArchives") }
	    sign configurations.archives
	}

	if (rootProject.tasks.findByPath(':publishAllLibs') != null) {
		rootProject.tasks.publishAllLibs.dependsOn project.tasks.uploadArchives
	}
	if (rootProject.tasks.findByPath(':publishAllLibsToMavenLocal') != null) {
		rootProject.tasks.publishAllLibsToMavenLocal.dependsOn project.tasks.install
	}
}


uploadArchives {
    repositories {
        mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			//Local Repository
			/*
			repository(url : new File(rootProject.buildDir, 'repoTest').toURI())
			*/
			
			//Putnami Repository
			/*
			configuration = configurations.deployerSsh
			repository(url: "scp://repo.putnami.org/putnamiRepo") {
				authentication(userName: "putnami_repo")
			}
			*/

			
			//OSS Repository
			if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
	
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
			}
			else {
				repository(url : new File(rootProject.buildDir, 'repoRelease').toURI())
			}
			
            pom.project {
				url 'http://pwt.putnami.org'
				name project.name
				description 'Putnami Web Toolkit plugin'
				scm {
					connection 'scm:git:git@github.com:Putnami/putnami-web-toolkit.git'
                    developerConnection 'scm:git:git@github.com:Putnami/putnami-web-toolkit.git'
                    url 'git@github.com:Putnami/putnami-web-toolkit.git'
                }


                licenses {
                    license {
                        name 'GNU Lesser General Public License'
                        url 'http://www.gnu.org/licenses/lgpl-3.0.html'
                        distribution 'repo'
                    }
                }

				 developers {
					developer {
						id 'fdumay'
						name 'Fabien Dumay'
						email 'fabien.dumay@putnami.com'
					}
					developer {
						id 'tcharbonnier'
						name 'Th√©ophane Charbonnier'
						email 'theophane.charbonnier@putnami.com'
					}
		        }
            }
        }
    }
}
