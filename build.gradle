import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.5'
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0'
	}
}

task publishAll
task publishAllToMavenLocal
task publishAllLibs
task publishAllLibsToMavenLocal
task licenseAll
task licenseFormatAll

ext {
	releaseVersion = '1.0.1'
	snapshotVersion = '1.0.1-SNAPSHOT'
	gwtVersion = '2.6.1'
	guavaVersion = '17.0'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'eclipse'
	apply plugin: 'license'
	apply plugin: 'gwt-base'
	

	group = 'fr.putnami.pwt'
	version = rootProject.snapshotVersion
	ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	eclipse {
		classpath {
			downloadSources=true
		}
	}

	configurations {
		log4j
		deployerSsh
	}
	
	repositories {
		mavenLocal()
		mavenCentral()
	}
	
	dependencies {	
		log4j 'org.slf4j:slf4j-api:1.6.1'
		log4j 'org.slf4j:jcl-over-slf4j:1.6.1'
		log4j 'org.slf4j:slf4j-log4j12:1.6.1'
		log4j 'log4j:log4j:1.2.16'
		
		deployerSsh 'org.apache.maven.wagon:wagon-ssh:2.2'
	
		compile "com.google.guava:guava:$guavaVersion"
		compile "com.google.guava:guava-gwt:$guavaVersion"
		runtime configurations.log4j
	
		testCompile 'junit:junit:4.+'
	
	}

	license {
		skipExistingHeaders = true
		header rootProject.file('LICENSE_HEADER')
		ext.projectName = project.name
	}

	gwt {
		gwtVersion =  rootProject.gwtVersion
		eclipse{
			addGwtContainer=false
		}
	}
	
	uploadArchives {
	    repositories {
	        mavenDeployer {
		        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				//Local Repository
				/*
				repository(url : new File(rootProject.buildDir, 'repoTest').toURI())
				*/
				
				//Putnami Repository
				configuration = configurations.deployerSsh
		        repository(url: "scp://repo.putnami.org/putnamiRepo") {
		            authentication(userName: "putnami_repo")
		        }
		        
				//OSS Repository
				/*
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
	
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
				*/
	
	            pom.project {
					url 'http://pwt.putnami.org'
	
					scm {
						connection 'scm:git:git@github.com:Putnami/putnami-web-toolkit.git'
	                    developerConnection 'scm:git:git@github.com:Putnami/putnami-web-toolkit.git'
	                    url 'git@github.com:Putnami/putnami-web-toolkit.git'
	                }
	
	
	                licenses {
	                    license {
	                        name 'GNU Lesser General Public License'
	                        url 'http://www.gnu.org/licenses/lgpl-3.0.html'
	                        distribution 'repo'
	                    }
	                }
	
					 developers {
						developer {
							id 'fdumay'
							name 'Fabien Dumay'
							email 'fabien.dumay@putnami.com'
						}
						developer {
							id 'tcharbonnier'
							name 'Th√©ophane Charbonnier'
							email 'theophane.charbonnier@putnami.com'
						}
			        }
		        }
	        }
	    }
	}

	project.tasks.uploadArchives.dependsOn project.tasks.licenseFormat
	project.tasks.install.dependsOn project.tasks.licenseFormat
	rootProject.tasks.publishAll.dependsOn project.tasks.uploadArchives
	rootProject.tasks.publishAllToMavenLocal.dependsOn project.tasks.install
	rootProject.tasks.licenseAll.dependsOn project.tasks.license
	rootProject.tasks.licenseFormatAll.dependsOn project.tasks.licenseFormat
}

configure(subprojects.findAll { it.name != 'pwt-doc' } ){
	//Include all non java (like *.gwt.xml) files from 'src/main/java' folder in resources
	sourceSets.main.resources.srcDir 'src/main/java'

	// Add all sources in jar (needed for GWT compilation using this library
	jar {
		from sourceSets.main.allJava
	}
	
	task javadocJar(type: Jar) {
	    classifier = 'javadoc'
	    from javadoc
	}

	task sourcesJar(type: Jar) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}

	artifacts {
	    archives javadocJar, sourcesJar
	}

	javadoc  {
		classpath += configurations.gwtSdk
	    options.addStringOption("sourcepath", "")
	}

	signing {
		required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
	    sign configurations.archives
	}

	rootProject.tasks.publishAllLibs.dependsOn project.tasks.uploadArchives
	rootProject.tasks.publishAllLibsToMavenLocal.dependsOn project.tasks.install
}


