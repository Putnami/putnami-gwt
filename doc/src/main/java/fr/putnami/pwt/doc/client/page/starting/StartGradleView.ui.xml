<!--

    This file is part of pwt-doc.

    pwt-doc is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pwt-doc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with pwt-doc.  If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:w="urn:import:fr.putnami.pwt.core.widget.client"
	xmlns:c="urn:import:fr.putnami.pwt.plugin.code.client">

	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.java.JavaConfiguration.JAVA_CONFIGURATION" />
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.xml.XmlConfiguration.XML_CONFIGURATION" />

	<w:HTMLPanel>
		<w:Heading level="2" summary="docSummary">Gradle's users</w:Heading>
		<p>From our point of view, Gradle is the best build automation ever made. We realy advice you to use it for your next accomplishments.  </p>
		
		<w:Heading level="3" summary="docSummary">gwt-gradle-plugin</w:Heading>
		<p>Gradle does not support any official GWT plugin yet. However, there is a very nice one hosted on Github : <a href="https://github.com/steffenschaefer/gwt-gradle-plugin" target="_BLANK">Steffen Sch√§ffer's gwt-gradle-plugin</a>.
		Unfortunately, today there is a little typo in the source code making impossible to define different modules between production tasks (like compile) and dev tasks (like GWT's SuperDevMode).</p>
		
		<p>To work, the GWT's SuperDevMode needs some specific configuration in the module gwt.xml file (like a specific linker, etc...). So it is necessary to have the ability to define different modules between dev and production.</p>
		
		<p>Therefore we've forked it and fixed it. 
			We've submited the issue and we wait for the next release. 
			Waiting we host a patch on our repository : *0.4-PWT_patched*.</p>
		
		<p>On this page only explains the bases of the plugin. You can refer to the <a href="http://steffenschaefer.github.io/gwt-gradle-plugin/" target="_BLANK">official doc</a> to go furher.</p>
		
		<w:Heading level="3" summary="docSummary">Init the build.gradle</w:Heading>
		<p>You can download have a full working <a href="https://github.com/Putnami/putnami-pwt/blob/master/samples/web-project/build.gradle" target="_BLANK">build.gradle</a></p>
		<ol>
			<li>Init the build script to get the non official gwt-gradle-plugin.</li>
			<li>Add the repositories to do download artifacts from the maven putnami repository.</li>
			<li>Add the dependencies on putnami.</li>
		</ol>
		<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
// Build script to resolve the gwt-gradle-plugin.
buildscript {
	repositories {
		maven (){ url 'http://repo.putnami.org' }
	}
	dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.4-PWT_patched'
	}
}

// Add our maven repository (or install the artifacts in yours) :
repositories {
	maven (){ url 'http://repo.putnami.org' }
	/* Use the standard repositories for other dependencies */
	mavenLocal()
	mavenCentral()
}

// Then add the desired dependencies
dependencies {
	compile "fr.putnami.pwt:pwt:@releaseVersion@"
	/* You may want to use these plugins */
	compile "fr.putnami.pwt:pwt-code-editor:@releaseVersion@"
}]]></pre>
		</c:StaticCode>
		
		<w:Heading level="3" summary="docSummary">Make a GWT library</w:Heading>
		<p>
		To build a gwt library you have to use the plugin gwt-base in order to properly set the classpath. 
		Because GWT need the library sources to generate the javascript we need to include all sources in the jar. 
		</p>
		<p>
		You can download a full <a href="https://github.com/Putnami/putnami-pwt/blob/master/samples/lib-project/build.gradle" target="_BLANK">build.gradle</a> of a working sample.
		</p>
		<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
apply plugin: 'gwt-base'

//Include all non java (like *.gwt.xml) files from 'src/main/java' folder in resources
sourceSets.main.resources.srcDir 'src/main/java'

// Add all sources in jar (needed for GWT compilation using this library)
jar {
	from sourceSets.main.allJava
}

gwt {
	gwtVersion = '@gwtVersion@'
}]]></pre>
		</c:StaticCode>

		<p>Then use the <kbd>gradle build</kbd> to build your library.</p>

		<w:Heading level="3" summary="docSummary">Make a web app</w:Heading>
		<p>To build a web app you have to :</p>
		<ol>
			<li>Add the gwt plugin.</li>
			<li>Add the jetty plugin.</li>
			<li>Init the gwt plugin as you want.</li>
			<li>Add an extra jettyDraftWar to make easy un faster the super dev mode.</li>
		</ol> 
		<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
apply plugin: 'gwt'
apply plugin: 'jetty'

gwt {
	gwtVersion = '@gwtVersion@'
	
	gwtDev {
		// Allows to debug with the standard Dev mode
		// ( no more supported on Chrome for Linux or on Firefox)
		jvmArgs("-Xdebug",  "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000")
	}
	
	// Modules used in production
	modules = ['...', '...']
	// Modules used in dev mode and super dev mode.
	devModules = ['...', '...']
	
	superDev {
		noPrecompile=true
	}
}

task jettyDraftWar(type: JettyRunWar) {
	dependsOn draftWar
	dependsOn.remove('war')
	webApp=draftWar.archivePath
}]]></pre>
		</c:StaticCode>
		
		<p>
		Once you can use the following commands : 
		</p>
<pre><![CDATA[
#To build the war
gradle build 
#To run the app in DevMode
gradle gwtDev 
]]></pre>
		<w:Alert ><h4>Note :</h4><p>The standard DevMode is only supported on Chrome except for Linux</p></w:Alert>
		
		<p>The SuperDevMode is also easy :</p>
		<ol>
			<li>Run the code server <kbd>gradle gwtSuperDev</kbd></li>
			<li>Go to <a href="http://localhost:9876" target="_BLANK">http://localhost:9876</a> and save the generated bookmarklets</li>
			<li>In Parallel, run Jetty (with a draft compile) : <kbd>gradle jettyDraftWar</kbd></li>
			<li>Go to <a href="http://localhost:8080/" target="_BLANK">http://localhost:8080/{projectName}</a> (the link is provided on the gradle console) and use the SuperDev bookmaklets to recompile the modules</li>
		</ol>
		<p>The SuperDevMode runs the server on jetty. If you need to run the server on an other container you can see the <strong>cargo</strong> an exemple <a href="https://github.com/Putnami/putnami-pwt/blob/master/samples/web-project/build.gradle-cargo" target="_BLANK">build.gradle</a>.</p>
	</w:HTMLPanel>
</ui:UiBinder>