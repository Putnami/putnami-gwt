<!--

    This file is part of pwt-doc.

    pwt-doc is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pwt-doc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with pwt-doc.  If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:w="urn:import:fr.putnami.pwt.core.widget.client"
	xmlns:c="urn:import:fr.putnami.pwt.plugin.code.client"
	>
	
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.java.JavaConfiguration.JAVA_CONFIGURATION" />
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.xml.XmlConfiguration.XML_CONFIGURATION" />

	<w:HTMLPanel title="PWT - Server Calls RPC Framework">
		<w:Header ui:field="header">
			<w:Heading level="1" summary="docSummary">Server calls</w:Heading>
			<p class="lead">
				GWT RPC framework makes it easy to invoke service procedure on server. But not easy enough for <strong title="Putnami Web Toolkit">PWT</strong>. <br/>
				That's why we improved this mechanism in various ways.
			</p>
			<ul class="lead">
				<li>Writing the full Async interface is no longer required.</li>
				<li>Use the <code>@AsyncHandler</code> instead to extend <code>AsynCallback</code>.</li>
				<li>Multiplex your request on a single HttpRequest.</li>
				<li>Handle <code>CommandEvent</code> to monitor the RPC activity.</li>
				<li>Delay your request with the <code>@LazyCommand</code> annotation.</li>
			</ul>
			<p class="lead">
				Without any Async interfaces and inner <code>AsyncCallback</code> declaration, 
				this feature helps you decrease the number of lines and keep your code readable and simple. 
				<br/>
				By optimizing the number of HTTP requests, your application is more efficient and reactive.
			</p>
		</w:Header>
		<w:HTMLPanel ui:field="content">
			<w:Heading level="2" summary="docSummary">How does it work?</w:Heading>
			<p>
			This framework is based on a invisible command pattern. This pattern allow to pipe all requests on unique servlet.
			</p>
			<p>
			To make it work you need to:
			</p>
			<ul>
				<li>On the client side you just have to generate a <code>ServiceProxy</code> from the service interface.</li>
				<li>On the server side you just have to instantiate a single servlet implementing the <code>CommandService</code></li>
			</ul>
			<p>
			When you make a service call, the request flow is:
			</p>
			<ol>
				<li>The <code>ServiceProxy</code> builds one <code>CommandRequest</code></li>
				<li>The <code>CommandRequest</code> is submited to the <code>CommandController</code>.</li>
				<li>The <code>CommandController</code> sends a <code>CommandRequestEvent</code> to notify handlers.</li>
				<li>Then <code>CommandController</code> encodes the <code>CommandRequest</code> in a RPC payload.</li>
				<li>The <code>CommandController</code> sends the payload over one <code>HttpTequest.</code></li>
				<li>On the server side, the <code>CommandService</code> handles the <code>CommandRequest</code></li>
				<li>The <code>CommandRequest</code> is dispatched it to the responsive <code>CommandExecutor</code>.</li>
				<li>The <code>CommandExecutor</code> invokes the service</li>
				<li>The <code>CommandExecutor</code> builds a <code>CommandResponse</code> with the result or the exception.</li>
				<li>The <code>CommandExecutor</code> returns the <code>CommandResponse</code></li>
				<li>Then <code>CommandService</code> writes <code>CommandResponse</code> on the <code>HttpResponse</code>.</li>
				<li>Back on the client side, the <code>CommandController</code> handles the <code>CommandResponse</code>.</li>
				<li>The <code>CommandResponse</code> result or exception is dispatched the to differents binded callbacks.</li>
				<li>Finally the <code>CommandController</code> sends a <code>CommandResponseEvent</code> to notify handlers.</li>
			</ol>
			<w:Alert type="INFO">
				<h4>Note :</h4>
				<ul>
					<li>The CommandService can process more than one request at once.</li>
					<li>The CommandService doesn't throw  any global exception, 
						each exception are wrapped in a CommandResponse.</li>
				</ul> 
			</w:Alert>

			<w:Heading level="2" summary="docSummary">On server side</w:Heading>
			<p>
			On the server side all requests pass through the <code>CommandService</code>. 
			<br/>
			The <code>CommandService</code> is in charge to dispatch the <code>CommandRequest</code> to a <code>CommandExecutor</code>.
			<br/>
			Then <code>CommandExecutor</code> handles <code>CommandRequest</code>, invokes the targeted service then returns a <code>CommandResponse</code>.
			</p>
			<w:Alert type="INFO">
				<h4>Coming soon :</h4>
				<ul>
					<li>J2EE CommandService resolving services in the JNDI</li>
					<li>Spring CommandService resolving services in the ApplicationContext</li>
				</ul>
			</w:Alert>
			<w:Heading level="3" summary="docSummary">BasicCommandService</w:Heading>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<p>
					The <code>BasicCommandService</code> is a basic implementation allowing to instantiate services.
					</p>
				</div>
				<c:StaticCode configuration="{XML_CONFIGURATION}">
<pre><![CDATA[
<!-- Command service servlet -->
<servlet>
  <servlet-name>commandService</servlet-name>
  <servlet-class>fr.putnami.pwt.core.service.server.service.BasicCommandService</servlet-class>
  <init-param>
      <param-name>services</param-name>
      <param-value>fr.putnami.pwt.example.sample.server.service.PersonServiceImpl</param-value>
  </init-param>
</servlet>
<servlet-mapping>
  <servlet-name>commandService</servlet-name>
  <url-pattern>Sample/commandService</url-pattern>
</servlet-mapping>
]]></pre>
				</c:StaticCode>
			</div>
			
			<w:Heading level="2" summary="docSummary">Service proxy</w:Heading>
			<w:Heading level="3" summary="docSummary">Basic proxy</w:Heading>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<p>
						On the client side you first need to generate a proxy with the following steps:
					</p>
					<ol>
						<li>Declare an interface which extends <code>ServiceProxy&lt;HANDLER, SERVICE&gt;</code>. 
							<br/>
							<strong>SERVICE</strong> is the interface of the remote service.
							<br/>
							<strong>HANDLER</strong> is the class on which async callbacks are dispatched.
						</li>
						<li>Generate the proxy with <code>GWT.create(...)</code>. 
							<br/>
							The rebind mechanism will generate the code to make commands and callbacks.
						</li>
						<li>Then finally then bind the proxy with the handler <code>proxy.bindService(hadler)</code>.
							<br/>
							Attach the proxy to the handler, in order to properly dispatch the async callbacks.
						</li>
					</ol>
				</div>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
// Remote proxy interface.
interface PersonRemoteService extends ServiceProxy<PersonView, PersonService>, PersonService {}

public PersonView(){
	// rebind the service in an instance. 
	this.personService = (PersonRemoteService) GWT.create(PersonRemoteService.class);
	// Bind callbacks with local handler methods.  
	this.personService.bindService(this);
}
]]></pre>
				</c:StaticCode>
			</div>
			
			<w:Heading level="3" summary="docSummary">Standard async method</w:Heading>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<p>
						To declare standard async method, you have to :
					</p>
					<ol>
						<li>Override the targeted method in the proxy interface.</li>
						<li>Append an <code>AsyncCallback&lt;RETURN_TYPE&gt;</code> parameter.</li>
						<li>Set the return type to <strong>void</strong>.</li>
					</ol>
				</div>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
interface PersonRemoteService extends ServiceProxy<PersonView, PersonService>, PersonService {
	void getPeople(String name, AsyncCallback<Person> callback);
}
]]></pre>
				</c:StaticCode>
			</div>
			
			<w:Heading level="2" summary="docSummary">Callbacks</w:Heading>
			<p>
				Thanks to the <code>@AsyncHandler</code> you don't need to declare the verbose <code>AsyncCallback</code>. 
				<br/>
				The annoted methods of the handler are scanned and used to generate the callbacks.
			</p>
			<div class="showcase-sample-block">
				<w:Heading level="3"  summary="docSummary">Success callback</w:Heading>
				<div class="showcase-sample">
					<p>
						The service method name is resolved by convention or with the attribute <code>@AsyncHandler(method="savePerson")</code>.
					</p>
					<p>
						The convention is : on{methodName with first letter in upper case}[Event]?
					</p>
					<p>
						The method must return void and have one parameter with the expected return type. 
						<br/>
						If the return type is <code>void</code> then the parameter must be <code>Void</code>.
						<br/>
						If the return type is primitive then the parameter type is the Object type representation.
					</p>
				</div>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
@AsyncHandler
void onSavePerson(Person result) {
	// Do something with the result
}
@AsyncHandler(method="savePerson")
void customSavePersonCallback(Person result) {
	// Do an other hing with the result
}
]]></pre>
				</c:StaticCode>
				<w:Heading level="3"  summary="docSummary">Faillure callback</w:Heading>
				<div class="showcase-sample">
					<p>
						The service method name is resolved by convention or with the attribute <code>@AsyncHandler(method="savePerson")</code>.
					</p>
					<p>
						The convention is : on{methodName with first letter in upper case}[Thrown]?
					</p>
					<p>
						The method return void and must have one Throwable parameter.
					</p>
				</div>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
@AsyncHandler
void onSavePersonThrown(Throwable thrown) {
	// Do something with the exception
}
@AsyncHandler(method="savePerson")
void customSavePersonThrown(Throwable thrown) {
	// Do something with the exception
}
]]></pre>
				</c:StaticCode>
			</div>

			<w:Heading level="2" summary="docSummary">Invoke a service</w:Heading>
			<div class="showcase-sample-block">
				<w:Heading level="3"  summary="docSummary">Single request</w:Heading>
				<div class="showcase-sample">
					<p>
						Server method invokation is a pushover, you just have to invoke the methods on the <code>ServiceProxy</code> then all concerned <code>AsyncHandler</code> are called .
					</p>
				</div>
				<w:Alert type="INFO">
					<h4>Note : </h4>
					<p>
					All proxy methods return null. the result is be passed to the <code>AsyncHandler</code>
					</p>
				</w:Alert>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
@UiHandler("saveButton")
void onSaveClick(ClickEvent event){
	Person personToSave = ...
	// Call the remote service
	this.personService.savePerson(personToSave);
}
]]></pre>
				</c:StaticCode>
				<w:Heading level="3"  summary="docSummary">Multiplex requests</w:Heading>
				<div class="showcase-sample">
					<p>
						The <code>CommandController</code> helps you suspend requests. When it is flushed the pending requests are collected and sent in a single HTTP Request to the server. On response, each <code>@AsyncHandler</code> is properly called.
					</p>
				</div>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
void load100Persons(){
	// allow to stack requests.
	CommandController.get().setSuspended(true);
	for(int i = 0 ; i < 100 ; i++){
		// does not make any http request.
		this.personService.getPerson(i);
	}
	// Send the 100 requests over a single http request.
	// For each request the callback will be called.
	CommandController.get().flush();
}
]]></pre>
				</c:StaticCode>
				<w:Heading level="3"  summary="docSummary">Lazy commands</w:Heading>
				<div class="showcase-sample">
					<p>
						Use the <code>LazyCommand</code> annotation to stack the request untill the next "no lazy" request is done or <code>CommandController</code> is flushed. 
					</p>
				</div>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
interface PersonRemoteService extends ServiceProxy<PersonView, PersonService>, PersonService {
	@LazyCommand
	Person getPerson(Long id);
}
]]></pre>
				</c:StaticCode>
			</div>

			<w:Heading level="2" summary="docSummary">Events</w:Heading>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<p>
						Events are fired when <code>CommandController</code> sent and received request. <br/>
					</p>
					<p>
						Usage examples:
					</p>
					<ul>
						<li>Make stats.</li>
						<li>Display a request pending modal.</li>
						<li>Reset timer to close user session.</li>
					</ul>
					<w:Alert>
						<h4>Note :</h4>
						<p>
						 If the method is annotated as <code>@QuietCommand</code> events are not fired.
						</p>
					</w:Alert>
				</div>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
CommandController.get().addCommandRequestHandler(requestHandler);
CommandController.get().addCommandResponseHandler(responseHandler);
]]></pre>
				</c:StaticCode>
			</div>
		</w:HTMLPanel>
	</w:HTMLPanel>
</ui:UiBinder>
