<!--

    This file is part of pwt-doc.

    pwt-doc is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pwt-doc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with pwt-doc.  If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:w="urn:import:fr.putnami.pwt.core.widget.client"
	xmlns:c="urn:import:fr.putnami.pwt.plugin.code.client"
	>

	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.java.JavaConfiguration.JAVA_CONFIGURATION" />
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.xml.XmlConfiguration.XML_CONFIGURATION" />

	<ui:with field="tableOfContent" type="fr.putnami.pwt.core.widget.client.NavSpy" />

	<w:HTMLPanel title="PWT - Data binding Framework">
		<w:Header ui:field="header">
			<w:Heading level="1" navSpy="{tableOfContent}">
				Data binding
			</w:Heading>
			<p class="lead">
			The <strong title="Putnami Web Toolkit">PWT</strong>'s data binding framework is strongly inspired from the <abbr title="Google Web Toolkit">GWT</abbr>'s editor pattern.
			<br/>
			We made this framework to make it easier to use, and much more extensible than the GWT one.
			</p>
			<p class="lead">
			The main features of this framework are:
			</p>
			<w:GridRow>
				<w:GridColumn size="8">
					<ul class="lead">
						<li>Declare the editors in UI templates.</li>
						<li>Bind the beans on forms and collections on tables or lists.</li>
						<li>Flush the data from Editors.</li>
						<li>Switch editable editor to readonly state, and vis versa.</li>
						<li>Support the data validation annotations.</li>
					</ul>
				</w:GridColumn>
				<w:GridColumn size="4">
					<w:Alert>
						<strong>Note :</strong>
						<p>
						Form and Table components are fully described in those pages:
						</p>
						<ul>
							<li><a href="#!Components">Forms documentation</a></li>
							<li><a href="#!Components">Tables documentation</a></li>
						</ul>
					</w:Alert>
				</w:GridColumn>
			</w:GridRow>
		</w:Header>
		<w:HTMLPanel ui:field="content">
			<w:Heading level="2" navSpy="{tableOfContent}">How does it work?</w:Heading>
			<p>The three main components of <strong>PWT</strong>'s binding framework are:</p>
			<ul>
				<li>The <strong>Model</strong> is the helper to deal with the data.</li>
				<li>The <strong>Driver</strong> is the orchestrator of the binding mechanism.</li>
				<li>The <strong>Editor</strong> displays data for the end user.</li>
			</ul>
			<p>The first step is to describe the root editor. 
				This one can contains sub-editors mapping fields. 
				The field is resolved via the path property. 
				This path can represent a direct field <code>path="name"</code> or a deeper one as <code>path="address.street"</code>.
				<br/>
			</p>
			<p>The seconds step is to initialize the root editor with the model. 
				The initialisation will instantiate a <code>Driver</code> and inspect the root editor to collect the sub-editors.
				It's also going to initialize those editors. 
			</p>
			<p>And last start the game. Edit beans or collections. Flush editors to get the edited data. Collect inputs errors...
			</p>
			<p>With visitor pattern implemented, you can easily extend the driver features to do what ever you want with the data binding.
			</p>
			<w:Alert>
				Framework's <strong>benefits</strong> compared to GWT's one:
				<ul>
					<li>Reduce Java code, the path are include in the templates</li>
					<li>The property @UiField and @Path are not mandatory.</li>
					<li>The Generic Driver doesnt't need to be rebind.</li>
					<li>Models are reusable.</li>
					<li>More evolutive.</li>
					<li>Client side validation (JSR 303) doesn't need the hibernate implementation.</li>
				</ul>
			</w:Alert>

			<w:Heading level="2" navSpy="{tableOfContent}">Driver</w:Heading>
			<p>The <code>Driver</code> is the brain of the <code>Editor</code>. It orchesters the form controls binding and flushing. 
				<br/>
				The <code>Driver</code> is totally transparent for the coder. All the common methods (initialize, edit and flush) are delegated to the <code>Editor</code>.
				<br/>Based on a visitor patter you can easily extends the driver workflows and add features. To do it, create your own visitor and call the <code>driver.accept(visitor)</code> method. 
			</p>
			

			<w:Heading level="2" navSpy="{tableOfContent}">Model</w:Heading>
			<p>The <code>Model&lt;T&gt;</code> is the main tool which makes all this binding features possible. 
				<br/>
				All the binding framework consist to get fields from bean to display them in views, and to flush the inputs to populate the bean.
				<br/>
				It's look like JAVA reflexion but GWT jre emulation doesn't make it possible, so we needed a tool for that.
			</p>
			<p>The <code>Model&lt;T&gt;</code> describes the bean class (inheritance and fields), and provides methods to process the basic operations such as :
			</p>
			<ul>
				<li>Get a field from a bean.</li>
				<li>Set a field to a bean.</li>
				<li>Instanciate a new bean.</li>
				<li>Clone a bean.</li>
				<li>Validate bean fields.</li>
			</ul>
			
			<w:Heading level="3" navSpy="{tableOfContent}">Generate a bean model</w:Heading>
			<p><strong>PWT</strong> provides a <code>ModelGenerator</code> which generates the model for you. 
				<br/>
				To generate the model, you only have to implement an interface <code>Model&lt;BEAN_CLASS&gt;</code> and allow it to be rebinded with <code>GWT.create(...)</code>.
			</p>
			<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
public interface PersonModel extends Model<Person> {}
private final Model<Person> personModel = GWT.create(PersonModel.class);
]]></pre>
			</c:StaticCode>

			<w:Heading level="2" navSpy="{tableOfContent}">Editors</w:Heading>
			<p>
			In <strong>PWT</strong> allmost all graphicals widgets implements an <code>Editor</code> interface. This allow the binding framework to collect all sub-editors within a root editor.
			</p>
			<p>
			The root editors are <code>EditorModel</code> implementations. 
			The <code>EditorModel</code> makes possible to initialize the editor with a <code>Model</code>.
			During this initialization the <code>EditorModel</code> creates the <code>ModelDriver</code> and initialize it.
			Thanks to the <code>Model</code> the <code>ModelDriver</code> is able to collect the sub-editors and initialize them properly.
			</p>
			<p>
				We can note various type of editors:
			</p>
			<ul>
				<li>The <code>EditorLeaf</code> edits non-object or immutable values.</li>
				<li>The <code>EditorComposite</code> contains sub-editors such as <code>EditorLeaf</code>.</li>
				<li>The <code>EditorCollection</code> is a <code>EditorLeaf</code> to edit collections.</li>
				<li>The <code>EditorInput</code> is editable editor (can be flushed).</li>
				<li>The <code>EditorOutput</code> is readonly editor.</li>
			</ul>
			<p>
			We can note two types of <code>EditorModel</code>:
			</p>

			<ul>
				<li>
				The Beans like <code>Form</code> or <code>Fieldset</code> which allows to edit bean-like objects.
				</li>				
				<li>
				 The Collections like <code>TableEditor</code>, <code>OutputList</code> or <code>Fieldset</code> which allows to edit collections of bean-like objects.
				</li>
			</ul>

			
			<w:Heading level="3" navSpy="{tableOfContent}">Bean editors descriptions</w:Heading>
			<p></p>
			
			<w:Heading level="4" navSpy="{tableOfContent}">Form</w:Heading>
			<p>In the below basic form example, all components are editors. The <code>&lt;w:Form&gt;</code> represents the root editor and <code>&lt;w:Input...&gt;</code> the sub-editors.
				<br/>
				The <code>path</code> attribute is used on the sub-editors to specify the field or accessor method on the bean. 
				We use a dotted path like <code>address.city</code> to access a field on a sub-bean.</p>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<w:Form ui:field="beanForm" type="INLINE">
						<w:FormGroup path="name"/>
						<w:FormGroup path="email" >
							<w:InputEmail placeholder="Entrer your email... " />
						</w:FormGroup>
						<w:InputText path="address.city" />
						<w:FormResetButton ui:field="beanFromSubmit" >Reset</w:FormResetButton>
					</w:Form>
				</div>
				<c:StaticCode configuration="{XML_CONFIGURATION}">
<pre><![CDATA[
<w:Form ui:field="beanForm" type="INLINE">
	<w:InputText path="name" placeholder="Entrer your name..." />
	<w:InputEmail path="email" placeholder="Entrer your email... " />
	<w:OutputText path="address.city" />
	<w:FormResetButton ui:field="beanFromSubmit" >Reset</w:FormResetButton>
</w:Form>
]]></pre>
				</c:StaticCode>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
Constants constants = ...;
Model<Person> personModel = ...:
...
beanForm.setMessageHelper(new MessageHelper(constants));
beanForm.initialize(personModel);
]]></pre>
				</c:StaticCode>
			</div>
			
			<w:Heading level="4" navSpy="{tableOfContent}">Embedded sub-forms</w:Heading>
			<p>
				<code>EditorComposite</code> can embed some sub-<code>EditorComposite</code>. In this case the sub-editor is considerated as an <code>EditorLeaf</code>.
			
			</p>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<w:Form ui:field="fieldsetForm">
						<w:FormGroup path="name" />
						<w:Fieldset path="address">
							<w:Legend>Address</w:Legend>
							<w:FormGroup path="city" />
						</w:Fieldset>
						<w:FormResetButton>Reset</w:FormResetButton>
						<w:FormSubmitButton>Submit</w:FormSubmitButton>
					</w:Form>
				</div>
				<c:StaticCode configuration="{XML_CONFIGURATION}">
<pre><![CDATA[
<w:Form ui:field="fieldsetForm">
	<w:FormGroup path="name">
		<w:Label>Name</w:Label>
	</w:FormGroup>						
	<w:Fieldset path="address">
		<w:Legend>Address</w:Legend>
		<w:OutputText path="city" />
	</w:Fieldset>
	<w:FormResetButton>Reset</w:FormResetButton>
	<w:FormSubmitButton>Submit</w:FormSubmitButton>
</w:Form>
]]></pre>
				</c:StaticCode>
			</div>

			<w:Heading level="3" navSpy="{tableOfContent}">Collection editors</w:Heading>
			<p></p>
			
			<w:Heading level="4" navSpy="{tableOfContent}">TableEditor</w:Heading>
			<p></p>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<w:TableEditor ui:field="tableEditor" readonly="false">
						<w:Pagination pageSize="3" />
						<w:TableOrder  />
						<w:TableSelecter selectionMode="COLUMN"/>
						<w:TableColumn path="name"/>
						<w:TableColumn path="email" readonly="true">
							<w:OutputEmail />
							<w:TableSort />
						</w:TableColumn>
						<w:TableColumn path="address.city"/>
						<w:TableColumn >
							<w:Button type="ICON" iconType="VIEW" />
						</w:TableColumn>
					</w:TableEditor>
				</div>
				<c:StaticCode configuration="{XML_CONFIGURATION}">
<pre><![CDATA[
<w:TableEditor ui:field="tableEditor">
	<w:Pagination pageSize="3" />
	<w:TableOrder  />
	<w:TableSelecter selectionMode="COLUMN"/>
	<w:TableColumn path="name"/>
	<w:TableColumn path="email" readonly="true">
		<w:OutputEmail />
		<w:TableSort />
	</w:TableColumn>
	<w:TableColumn path="address.city"/>
	<w:TableColumn >
		<w:Button type="ICON" iconType="VIEW" />
	</w:TableColumn>
</w:TableEditor>
]]></pre>				
				</c:StaticCode>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
List<Person> people = ...
Constants constants = ...;
Model<Person> personModel = ...:

tableEditor.setMessageHelper(new MessageHelper(constants));
tableEditor.initialize(personModel);
tableEditor.edit(people);
]]></pre>				
				</c:StaticCode>
			</div>
			
			<w:Heading level="4" navSpy="{tableOfContent}">ListEditor</w:Heading>
			<p>
			</p>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<w:GridRow>
						<w:GridColumn size="6">
							<w:OutputList ui:field="outputListEditor" type="LIST">
								<w:Form  ui:field="outputListItemTemplate" type="INLINE">
									<w:OutputText path="name" tag="span" />
									<w:OutputEmail path="email" tag="span" />
								</w:Form>
							</w:OutputList>
						</w:GridColumn>
						<w:GridColumn size="6">
							<w:InputList ui:field="inputListEditor">
								<w:output>
									<w:Form  ui:field="inputListInItemTemplate" type="INLINE" readonly="true">
										<w:FormGroup path="name" />
										<w:FormGroup path="email" />
									</w:Form>
								</w:output>
								<w:input>
									<w:Form  ui:field="inputListOutItemTemplate" type="INLINE">
										<w:FormGroup path="name" />
										<w:FormGroup path="email" />
									</w:Form>
								</w:input>
							</w:InputList>
						</w:GridColumn>
					</w:GridRow>
				</div>
				<c:StaticCode configuration="{XML_CONFIGURATION}">
<pre><![CDATA[
<w:GridRow>
	<w:GridColumn size="6">
		<w:OutputList ui:field="outputListEditor" type="LIST">
			<w:Form  ui:field="outputListItemTemplate" type="INLINE">
				<w:OutputText path="name" tag="span" />
				<w:OutputEmail path="email" tag="span" />
			</w:Form>
		</w:OutputList>
	</w:GridColumn>
	<w:GridColumn size="6">
		<w:InputList ui:field="inputListEditor">
			<w:output>
				<w:Form  ui:field="inputListInItemTemplate" type="INLINE" readonly="true">
					<w:FormGroup path="name" />
					<w:FormGroup path="email" />
				</w:Form>
			</w:output>
			<w:input>
				<w:Form  ui:field="inputListOutItemTemplate" type="INLINE">
					<w:FormGroup path="name" />
					<w:FormGroup path="email" />
				</w:Form>
			</w:input>
		</w:InputList>
	</w:GridColumn>
</w:GridRow>
]]></pre>
				</c:StaticCode>
				<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
outputListEditor.setMessageHelper(messageHelper);
outputListEditor.initialize(personModel);
outputListItemTemplate.setMessageHelper(messageHelper);
outputListItemTemplate.initialize(personModel);
outputListEditor.edit(people);

inputListEditor.setMessageHelper(messageHelper);
inputListEditor.initialize(personModel);
inputListInItemTemplate.setMessageHelper(messageHelper);
inputListInItemTemplate.initialize(personModel);
inputListOutItemTemplate.setMessageHelper(messageHelper);
inputListOutItemTemplate.initialize(personModel);
inputListEditor.edit(people);
]]></pre>
				</c:StaticCode>
			</div>

			
		</w:HTMLPanel>
	</w:HTMLPanel>
</ui:UiBinder>