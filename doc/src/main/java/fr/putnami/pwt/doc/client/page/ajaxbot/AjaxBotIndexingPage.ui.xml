<!--

    This file is part of pwt-doc.

    pwt-doc is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pwt-doc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with pwt-doc.  If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:w="urn:import:fr.putnami.pwt.core.widget.client"
	xmlns:c="urn:import:fr.putnami.pwt.plugin.code.client">
	
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.xml.XmlConfiguration.XML_CONFIGURATION" />
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.java.JavaConfiguration.JAVA_CONFIGURATION" />

	<w:HTMLPanel title="PWT - Ajax Bot Indexing Plugin">
		<w:Header ui:field="header">
			<w:Heading level="1" summary="docSummary">Ajax bot indexing plugin</w:Heading>
			<p class="lead">
				As we did, you probably think that <strong>GWT</strong> web apps are not googlizable, you were wrong. 
				<br/>
				<strong>PWT</strong> provides a plugin making possible to index ajax pages by search engines. 
			</p>
		</w:Header>
		<w:HTMLPanel ui:field="content">
			<w:Heading level="2" summary="docSummary">How does it work?</w:Heading>
			<p>
			All main search bots such as google use a protocole for follow all hash links <strong>#!{fragment}</strong>. 
			<br/>
			Fortunately that <strong>PWT</strong> 
			<a href="#Navigation">navigation framework</a> formalizes the MVP history tokens making the places crawlable.
			</p>
			<p>
			Search engine crawlers detects  <strong>#!{fragment}</strong> links and recall the server with this fragment in a <code>_escaped_fragment_</code> query parameter.
			</p>
			<p>
			<strong>The url</strong> <a>http://{yourserver}/{yourpage}#!{yourplace}</a>
			<br/>
			<strong>Becomes</strong> <a>http://{yourserver}/{yourpage}?_escaped_fragment_={yourplace}</a>
			</p>
			<p>
			So we can render the full HTML on the server side and return it to the search bots.
			</p>
			<p>
			Thanks to HtmlUnit and a small filter we handle all requests containing the query parameter <code>_escaped_fragment_</code> and generate a full html with all the indexable content. 
			</p>
			<p>
			All <code>&lt;script&gt;</code> and <code>&lt;iframe&gt;</code> tags are removed from the html. 
			</p>
			
			<w:Alert>
				<strong>Google specification</strong>
				<p>
					<a href="https://developers.google.com/webmasters/ajax-crawling/docs/specification" >https://developers.google.com/webmasters/ajax-crawling/docs/specification</a>
				</p>
			</w:Alert>
			
			<w:Heading level="2" summary="docSummary">Making it work</w:Heading>
			<w:Heading level="3" summary="docSummary">Add dependency</w:Heading>
			<p>
			First you need to add a dependency on the ajax bot indexing plugin.
			</p>
			<div class="showcase-sample-block">
				<div class="showcase-sample">
					<strong>With Gradle</strong>
				</div>
	  			<c:StaticCode configuration="{JAVA_CONFIGURATION}">
					<pre><![CDATA[
dependencies {
	"fr.putnami.pwt:pwt-ajax-bot-indexing:$pwtVersion"
}
]]></pre>
	  			</c:StaticCode>
				<div class="showcase-sample">
					<strong>Or with Maven</strong>
				</div>
	  			<c:StaticCode configuration="{XML_CONFIGURATION}">
					<pre><![CDATA[
<dependency>
	<groupId>fr.putnami.pwt</groupId>
	<artifactId>pwt-ajax-bot-indexing</artifactId>
	<version>${pwt.version}</version>
</dependency>
]]></pre>
		  		</c:StaticCode>
			</div>
			<w:Heading level="3" summary="docSummary">Web.xml</w:Heading>
			<p>
				Then you initialize the filter in the web.xml.
			</p>
			<p>
				<strong>Parameters :</strong>
			</p>
			<ul>
				<li><code>cacheFolder</code> : The folder where the html files are saved. If not set the cache is disable.</li>
				<li><code>cacheResetOnStartup</code> : If "true" the html cache is cleared on server's startup.</li>
			</ul>
  			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[
<filter>
	<filter-name>ajax-bot-indexing-filter</filter-name>
	<description>Filter making passible to render ajax page as HTML.</description>
	<filter-class>fr.putnami.pwt.ajaxbot.AjaxBotIndexingFilter</filter-class>
	<init-param>
		<param-name>cacheFolder</param-name>
		<param-value>/tmp/cacheRenderedAjaxPage</param-value>
		<description>Rendered html cache folder</description>
	</init-param>
	<init-param>
		<param-name>cacheResetOnStartup</param-name>
		<param-value>true</param-value>
		<description>Clear the html cache on server startup</description>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>ajax-bot-indexing-filter</filter-name>
	<url-pattern>*</url-pattern>
</filter-mapping>
]]></pre>
		  	</c:StaticCode>

			<w:Heading level="3" summary="docSummary">Initialize the gwt host page</w:Heading>
			<p>
			The last step is to add a meta <code>fragment</code> on the html which host the gwt module. 
			This meta tag allow search engine crawler to index the first page as an ajax one.
			</p>
  			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[
<html>
	<head>
		...
		<meta name="fragment" content="!">
		...
	</head>
</html>
]]></pre>
		  	</c:StaticCode>

			<w:Heading level="3" summary="docSummary">Clean html cache</w:Heading>
			<p>
			You can easily clean all the html genarated cache by invoking the server on any page with the parameter <code>_ajaxbotfilter_cache_reset_</code>.
			<br/>
			Example : <a>htp://{yourserver}/{yourpage}?_ajaxbotfilter_cache_reset_</a>
			</p>
		</w:HTMLPanel>
	</w:HTMLPanel>
</ui:UiBinder>