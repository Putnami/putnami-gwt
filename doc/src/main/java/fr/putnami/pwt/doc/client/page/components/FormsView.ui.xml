<!--

    This file is part of pwt.

    pwt is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pwt is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with pwt.  If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:w="urn:import:fr.putnami.pwt.core.widget.client"
	xmlns:c="urn:import:fr.putnami.pwt.plugin.code.client">

	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.xml.XmlConfiguration.XML_CONFIGURATION" />
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.java.JavaConfiguration.JAVA_CONFIGURATION" />

	<ui:with field="tableOfContent" type="fr.putnami.pwt.core.widget.client.NavSpy" />

	<w:HTMLPanel>
		<w:Heading level="2" navSpy="{tableOfContent}">Forms</w:Heading>
		<p>
			<strong title="Putnami Web Toolkit">PWT</strong> provides a full components set in order to build nice and efficient forms.<br />
			This framework allow to easily bind data with views, then flush data from views. <br />
			The <code>Data Binding</code> is fully descrided in this <a href="#!DataBinding">dedecated page.</a><br/>
		</p>
		<p>
			<code>Forms</code> are composed with sub-<code>Form</code>, <code>Fieldset</code>, <code>FormGroup</code> or <code>EditorInput</code> and <code>EditorOutput</code>.
			The form can drive how the <code>FormGroup</code> is rendered. 
			As you can see in the following examples, there are 3 layouts possibles (<code>BASIC</code>, <code>INLINE</code>, <code>HORIZONTAL</code>).
			Each sub components manages his own layout if setted.<br/>
			The <code>AbstractHTMLPanel</code> inheritance provide a good design flexibility.
		</p>

		<w:Heading level="3" navSpy="{tableOfContent}">Basic form</w:Heading>
		<p>
			With the <code>BASIC</code> layout, all components are set to <code>width: 100%;</code>.
		</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<w:Form ui:field="formBasic" layout="BASIC">
					<w:FormGroup path="email">
						<w:Label>Email address</w:Label>
						<w:InputEmail placeholder="Enter email" />
					</w:FormGroup>
					<w:FormGroup path="password">
						<w:Label>Password</w:Label>
						<w:InputPassword placeholder="Password" />
					</w:FormGroup>
					<w:Footer>
						<w:Button>Sign in</w:Button>
					</w:Footer>
				</w:Form>
				<span class="clearfix" />
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[
<w:Form layout="BASIC"> 
	<w:FormGroup path="email">
		<w:Label>Email address</w:Label>
		<w:InputEmail placeholder="Enter email" />
	</w:FormGroup>
...
</w:Form>
]]></pre> 
			</c:StaticCode>
		</div>
		
		<w:Heading level="3" navSpy="{tableOfContent}">Inline form</w:Heading>
		<p>The <code>INLINE</code> layout render controls with a left aligned and inline-block. 
		the label are hidden and only visible for screen readers. Some controls like <code>TextArea</code> still displayed on 100% width. 
		</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<w:Form ui:field="formInline" layout="INLINE">
					<w:FormGroup path="email">
						<w:Label>Email address</w:Label>
						<w:InputEmail placeholder="Enter email" />
					</w:FormGroup>
					<w:FormGroup path="password">
						<w:Label>Password</w:Label>
						<w:InputPassword placeholder="Password" />
					</w:FormGroup>
					<w:Button>Sign in</w:Button>
				</w:Form>
				<span class="clearfix" />
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
<pre><![CDATA[
<w:Form layout="INLINE"> 
	<w:FormGroup path="email">
		<w:Label>Email address</w:Label>
		<w:InputEmail placeholder="Enter email" />
	</w:FormGroup>
	<w:FormGroup path="password">
		<w:Label>Password</w:Label>
		<w:InputPassword placeholder="Password" />
	</w:FormGroup>
	<w:Button>Sign in</w:Button> 
</w:Form>
]]></pre>
			</c:StaticCode>
		</div>


		<w:Heading level="3" navSpy="{tableOfContent}">Horizontal form</w:Heading>
		<p>
			The <code>HORIZONTAL</code> layout use the Bootstrap grid system to render the label in the left column and the right column contains the control, the help message and the errors.   
		</p>
		<div class="showcase-sample-block">
				<div class="showcase-sample">
				<w:Form ui:field="formHorizontal" layout="HORIZONTAL">
					<w:FormGroup path="email">
						<w:Label>Email address</w:Label>
						<w:InputEmail placeholder="Enter email" />
					</w:FormGroup>
					<w:FormGroup path="password">
						<w:Label>Password</w:Label>
						<w:InputPassword placeholder="Password" />
					</w:FormGroup>
				</w:Form>
				<span class="clearfix" />
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[
<w:Form layout="HORIZONTAL"> 
	<w:FormGroup path="email">
		<w:Label>Email address</w:Label>
		<w:InputEmail placeholder="Enter email" />
	</w:FormGroup>
 	... 
</w:Form>
]]></pre> 
			</c:StaticCode>
		</div>

		<w:Heading level="3" navSpy="{tableOfContent}">Readonly form</w:Heading>
		<p><code>Form</code> can be set to readonly, in this case the <code>FormGroup</code> use <code>EditorOutput</code>. 
			If <code>EditorInput</code> is not within the a <code>FormGroup</code> the <code>EditorInput</code> is set to disabled.</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<w:Form ui:field="formReadonly" layout="BASIC" readonly="true">
					<w:FormGroup path="email">
						<w:Label>Email address</w:Label>
						<w:OutputEmail />
						<w:InputEmail placeholder="Enter email" />
					</w:FormGroup>
					<w:FormGroup path="password">
						<w:Label>Password</w:Label>
						<w:InputPassword placeholder="Password" />
						<w:OutputStaticText>*****</w:OutputStaticText>
					</w:FormGroup>
				</w:Form>
				<span class="clearfix" />
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[
<w:Form layout="BASIC" readonly="true"> 
	<w:FormGroup path="email">
		<w:Label>Email address</w:Label>
		<w:OutputEmail placeholder="Enter email" />
		<w:InputEmail placeholder="Enter email" />
	</w:FormGroup>
 	... 
</w:Form>
]]></pre> 
			</c:StaticCode>
		</div>

		<w:Heading level="3" navSpy="{tableOfContent}">Header and Footer</w:Heading>
		<p><code>Form</code> accept <code>Header</code> and <code>Footer</code> which are automaticaly positionned. 
		Those components can be wrapped by the parent container such as <code>Modal</code> or <code>Panel</code>.
		</p>
		<div class="showcase-sample-block">
				<div class="showcase-sample">
				<w:Panel collapsible="true" color="PRIMARY">
					<w:Form ui:field="formHeaderFooter" layout="HORIZONTAL">
						<w:Header><h4><w:OutputText path="name" /></h4></w:Header>
						<w:FormGroup path="email">
							<w:Label>Email address</w:Label>
							<w:OutputEmail />
							<w:InputEmail placeholder="Enter email" />
						</w:FormGroup>
						<w:FormGroup path="password">
							<w:Label>Password</w:Label>
							<w:InputPassword placeholder="Password" />
							<w:OutputStaticText>*****</w:OutputStaticText>
						</w:FormGroup>
						<w:Footer>
							<w:Button>Sign in</w:Button>
						</w:Footer>
					</w:Form>
				</w:Panel>
				<span class="clearfix" />
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[<w:Panel collapsible="true" color="PRIMARY">
	<w:Form layout="HORIZONTAL">
		<w:Header><w:Heading level="4"><w:OutputText path="Name" /></w:Heading></w:Header>
...
		<w:Footer><w:Button>Sign in</w:Button></w:Footer>
	</w:Form>
</Panel>]]></pre> 
			</c:StaticCode>
		</div>



		<w:Heading level="3" navSpy="{tableOfContent}">Fieldset</w:Heading>
		<p>Acting like <code>Form</code>, <code>Fieldset</code> allow to structure the <code>Form</code> by managing it's own layout, 
			and it's own readonly state. Also accept one <code>Legend</code> as child.<br/>
			As <code>Fieldset</code> extends an <code>AbstractHTMLPanel</code> you have all the needed flexibility.
		
		</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<w:Form ui:field="formFieldset" layout="BASIC">
					<w:Fieldset ui:field="fieldsetIds" layout="HORIZONTAL">
						<w:Legend>Sign in</w:Legend>
						<w:FormGroup path="email">
							<w:Label>Email</w:Label>
							<w:InputEmail placeholder="Enter email" />
							<w:OutputEmail />
						</w:FormGroup>
						<w:FormGroup path="password">
							<w:Label>Password</w:Label>
							<w:InputPassword placeholder="Password" />
							<w:OutputStaticText>******</w:OutputStaticText>
						</w:FormGroup>
					</w:Fieldset>
					<w:Fieldset>
						<w:Legend>More...</w:Legend>
						<w:FormGroup path="rememberMe">
							<w:Label>Remember me</w:Label>
							<w:InputBoolean>keeping in touch</w:InputBoolean>
						</w:FormGroup>
					</w:Fieldset>
					<w:Footer>
						<w:Button ui:field="fieldsetToogleReadOnly">Toggle readonly on Sign in block </w:Button>
					</w:Footer>
				</w:Form>
				<span class="clearfix" />
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[<w:Form ui:field="formFieldset" layout="BASIC">
	<w:Fieldset ui:field="fieldsetIds" layout="HORIZONTAL">
		<w:Legend>Sign in</w:Legend>
		<w:FormGroup path="email">
			<w:Label>Email</w:Label>
			<w:InputEmail placeholder="Enter email" />
			<w:OutputEmail />
		</w:FormGroup>
		<w:FormGroup path="password">
			<w:Label>Password</w:Label>
			<w:InputPassword placeholder="Password" />
			<w:OutputStaticText>******</w:OutputStaticText>
		</w:FormGroup>
	</w:Fieldset>
	<w:Fieldset>
		<w:Legend>More...</w:Legend>
		<w:FormGroup path="rememberMe">
			<w:Label>Remember me</w:Label>
			<w:InputBoolean>keeping in touch</w:InputBoolean>
		</w:FormGroup>
	</w:Fieldset>
	...
</w:Form>]]></pre>
			</c:StaticCode>
		</div>
		<w:Heading level="3" navSpy="{tableOfContent}">Form groups</w:Heading>
		<p>
			The <code>FormGroup</code> is a smart component that help you build <code>Forms</code>. 
			Drived by the <code>FormLayout</code> it position components such as a <code>Label</code>, 
			<code>EditorInput</code> or <code>EditorOutput</code>, <code>Tooltip</code>, 
			<code>Help</code>, and <code>ErrorGroup</code> in the right order.
			If setted as readonly,  the input field is automaticaly switch to an output field.  <br/>
			You can declare every sub components in the template, but the <code>FormGroup</code> can also guess a lot of thing by itself. 
				<code>Label</code>, <code>Help</code>, and <code>Tooltip</code> can be resolved by convention thanks to a <code>MessageHelper</code>.
				The <code>EditorInput</code> and the <code>EditorOutput</code> are guessed with the property layout.
		</p>
		
		<w:Heading level="4" navSpy="{tableOfContent}">Editable Control</w:Heading>
		<p>
			<code>FormGroup</code> exemple with all declarable components.  
			<ul>
				<li><code>Label</code></li>
				<li><code>Tooltip</code></li>
				<li><code>Help</code></li>
				<li><code>EditorInput</code></li>
				<li><code>EditorOutput</code></li>
			</ul>
			The  attribute <code>path="email"</code> allow the <code>FormGroup</code> and sub components to be binded on the email field of the editied bean. 
		</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<w:Form ui:field="formGroupEditable" layout="BASIC" >
					<w:FormGroup path="email">
						<w:Label htmlFor="emailInput">Email</w:Label>
						<w:Tooltip text="Please enter your address email" placement="TOP" >
							<w:InputEmail htmlId="emailInput" placeholder="Enter email" />
						</w:Tooltip>
						<w:OutputEmail />
						<w:Help text="An friendly help message" />
					</w:FormGroup>
				</w:Form>
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[
<w:Form layout="BASIC">
	<w:FormGroup path="email">
		<w:Label htmlFor="emailInput">Email</w:Label>
		<w:Tooltip text="Please enter your address email" placement="TOP" >
			<w:InputEmail htmlId="emailInput" placeholder="Enter email" />
		</w:Tooltip>
		<w:OutputEmail />
		<w:Help text="An friendly help message" />
	</w:FormGroup>
</w:Form>
]]></pre>
			</c:StaticCode>
		</div>
		
		<w:Heading level="4" navSpy="{tableOfContent}">Readonly control</w:Heading>
		<p>
			When set to readonly, the form group present the <code>OutputEditor</code>
		</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<w:Form ui:field="formGroupReadonly" layout="BASIC">
					<w:FormGroup path="email" readonly="true">
						<w:Label htmlFor="emailInput">Email</w:Label>
						<w:OutputEmail />
					</w:FormGroup>
				</w:Form>
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[<w:Form layout="BASIC">
	<w:FormGroup path="email" readonly="true">
		...
		<w:OutputEmail />
	</w:FormGroup>
</w:Form>]]></pre>
			</c:StaticCode>
		</div>

		<w:Heading level="4" navSpy="{tableOfContent}">Magic FormGroup</w:Heading>
		<p>
			Are the FormGroup magic?  no... <br/>
			In this example all <code>Label</code>, <code>Tooltip</code>, and <code>Help</code> are resolved with a <code>MessageHelper</code> initialized with contants.
			This feature is really usefull for code reuse.<br/>
			Further more, the <code>EditorInput</code> and the <code>EditorOutput</code> are generated thanks the property layout, in this case <code>String</code> are mapped with an <code>InputText</code> and an <code>OutputText</code>.
			If the default editor for the the layout doesn't exists or is not appropriate you can declare it manually.
		</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<w:Form ui:field="formGroupMagic" layout="BASIC">
					<w:FormGroup path="name" />
				</w:Form>
			</div>
			<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[<!-- In the template ui.xml -->
<w:Form layout="BASIC">
	<w:FormGroup path="name" />
</w:Form>]]></pre>
			</c:StaticCode>
	 		<c:StaticCode configuration="{JAVA_CONFIGURATION}">
	<pre><![CDATA[// In the java
public interface Constants extends ConstantsWithLookup {
	@DefaultStringValue("Name")
	String nameLabel();

	@DefaultStringValue("Enter your name")
	String namePlaceholder();

	@DefaultStringValue("Kindly message for name field")
	String nameHelp();
}
...
@UiField
Form<Bean> formMagic;
...
MessageHelper messageHelper = new MessageHelper((ConstantsWithLookup) GWT.create(Constants.class));
formMagic.setMessageHelper(messageHelper);
...]]></pre>
			</c:StaticCode>
		</div>
		
		<w:Heading level="4" navSpy="{tableOfContent}">Errors</w:Heading>
		<p>
			The errors are automaticaly displayed in the responsible <code>FormGroup</code>.
		</p>
		<div class="showcase-sample-block">
			<div class="showcase-sample">
				<div class="form" role="form">
					<div class="form-group has-error">
						<label class="control-label" for="uid-1">Email address</label>
						<input type="text" class="gwt-TextBox form-control" placeholder="Enter email" id="uid-1" value="@gmail.com"/>
						<ul class="bg-danger">
							<li>must be a valid email address</li>
						</ul>
					</div>
				</div>
			</div>
	 		<c:StaticCode configuration="{XML_CONFIGURATION}">
				<pre><![CDATA[<w:FormGroup path="email" readonly="true">
	<w:OutputEmail />
</w:FormGroup>]]></pre>
			</c:StaticCode>
		</div>

	</w:HTMLPanel>

</ui:UiBinder>