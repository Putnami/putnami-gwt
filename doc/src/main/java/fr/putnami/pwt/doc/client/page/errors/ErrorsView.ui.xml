<!--

    This file is part of pwt-doc.

    pwt-doc is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pwt-doc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with pwt-doc.  If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:w="urn:import:fr.putnami.pwt.core.widget.client"
	xmlns:c="urn:import:fr.putnami.pwt.plugin.code.client"
	>
	
	<ui:import field="fr.putnami.pwt.plugin.code.client.configuration.java.JavaConfiguration.JAVA_CONFIGURATION" />

	<ui:with field="tableOfContent" type="fr.putnami.pwt.core.widget.client.NavSpy" />

	<w:HTMLPanel title="PWT - Errors management">
		<w:Header ui:field="header">
			<w:Heading level="1" navSpy="{tableOfContent}">Errors Handling</w:Heading>
			<p class="lead">
				<strong title="Putnami Web Toolkit">PWT</strong> provides an easy way to handle errors in the application.
			</p>
		</w:Header>
		<w:HTMLPanel ui:field="content">
			<w:Heading level="2" navSpy="{tableOfContent}">Error Manager</w:Heading>
			<p><strong title="Putnami Web Toolkit">PWT</strong> use an <code>ErrorManager</code> in wich we register some <code>ErrorHandler</code>s and eventualy a <code>defaultErrorHandler</code> which handle errors after the lower priority handler.</p>
			<p>It also accepts an <code>ErrorDisplayer</code> to eventually display a message to the end user</p>
			<p>Default registered <code>ErrorHandler</code>s are</p>
			<ul>
				<li><code>ClientErrorHandler</code> handles the 4xx class HTTP errors.</li>
				<li><code>ServerErrorHandler</code> handles the 5xx class HTTP errors 
					<w:Alert type="INFO"><p>Note : Exceptions thrown by server-side services don't generate HTTP 500 errors.</p></w:Alert>
				</li>
				<li><code>DefaultCommandExceptionErrorHandler</code> handles the <code>CommandException</code> (Exceptions occuring server side when calling services method or encapsuling thrown exception).
					<w:Alert type="INFO"><p>Note : This <code>ErrorHandler</code> has the lowest priority.</p></w:Alert>
				</li>
			</ul>
			<p>Those provided handlers simply display the error if a <code>ErrorDisplayer</code> is registered.</p>
			
			<w:Heading level="2" navSpy="{tableOfContent}">Error Handlers</w:Heading>
			<p>You can register several error<code>ErrorHandler</code>s. They are processed by priority (higher first).</p>
			<p>To define an <code>ErrorHandler</code> you'll have to define a priority and implement the <code>handle</code> method. If you want to prevent lower priority handlers processing, return <code>true</code>.</p>
			<p>We provide several base abstract classes to handle Exception, such as</p>
			<ul>
				<li><code>AbstractErrorHandler</code> a base class with a default priority.</li>
				<li><code>AbstractStatusCodeErrorHandler</code> to handle <code>StatusCodeException</code></li>
				<li><code>AbstractCommandExceptionErrorHandler</code> to handle <code>CommandException</code></li>
				<li><code>AbstractInvocationExceptionErrorHandler</code> : a particular <code>AbstractCommandExceptionErrorHandler</code> to handle Server side Exception.</li>
			</ul>
			<w:Heading level="3">Example</w:Heading>
			<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
public class MyExceptionErrorHandler extends AbstractErrorHandler {

	@Override
	public boolean handle(Throwable error) {
		if (ErrorManager.get().hasErrorDisplayer()) {
			ErrorManager.get().getErrorDisplayer().display(error, Severity.DANGER);
		}
		return true;
	}

}]]></pre>
			</c:StaticCode>
			<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
/*
* In Entry point
*/
ErrorManager.get().registerHandler(new MyExceptionErrorHandler());]]></pre>
			</c:StaticCode>
			
			<w:Heading level="2" navSpy="{tableOfContent}">Error Displayer</w:Heading>
			<p>In most cases, the errors need to be displayed to the end user. We provide a simple <code>ErrorDisplayer</code> : <code>SimpleErrorDisplayer</code> which display errors with their stacktrace.</p>
			<p>You can set a <code>ConstantsWithLookup</code> to the <code>SimpleErrorDisplayer</code> to eventually set the error title and message from the error class</p>
			<ul>
				<li>When using the <code>display(Throwable, Severity)</code> or the <code>display(String message, Throwable, Severity)</code> method, the title will be extract from the property {classSimpleName}Title in constants.</li>
				<li>When using the <code>display(Throwable, Severity)</code> method, the message will be extract from the property {classSimpleName}Message in constants.</li>
			</ul>
			<br/>
			<p>In order to use this displayer you'll have to set it in the <code>ErrorManager</code></p>
			<w:Heading level="3" navSpy="{tableOfContent}">Example</w:Heading>
			<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
/*
* In Entry point
*/
SimpleErrorDisplayer errorDisplayer = new SimpleErrorDisplayer();
// Eventually set the error constants
errorDisplayer.setConstants((ConstantsWithLookup) GWT.create(ErrorConstants.class));
ErrorManager.get().setErrorDisplayer(errorDisplayer);]]></pre>
			</c:StaticCode>
			<c:StaticCode configuration="{JAVA_CONFIGURATION}">
<pre><![CDATA[
public interface ErrorConstants extends ConstantsWithLookup {

	@DefaultStringValue("Runtime error")
	String runtimeExceptionTitle();

	@DefaultStringValue("An unknown exception occured. Please contact technical services if this Error is blocking")
	String runtimeExceptionMessage();
}]]></pre>
	</c:StaticCode>
			<w:Heading level="3" navSpy="{tableOfContent}">Try it !</w:Heading>
			<w:Button ui:field="errorBtn" text="Runtime Exception" />
			<w:Button ui:field="customErrorBtn" text="Custom Runtime Exception" />
			<w:Button ui:field="otherErrorBtn" text="Other Exception" />
		</w:HTMLPanel>
	</w:HTMLPanel>

</ui:UiBinder>